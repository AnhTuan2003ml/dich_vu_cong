import os
import json
import numpy as np
import speech_recognition as sr
import tkinter as tk
import tkinter.font as font
from tkinter import messagebox
from PIL import Image, ImageTk
from sentence_transformers import SentenceTransformer
from utils.sound_util import speak
from WinForm.giay_tam_tru import run_gtt

MODEL_PATH = "trained_model"

class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("·ª®ng d·ª•ng d·ªãch v·ª•")
        self.root.attributes('-fullscreen', True)

        # T·∫°o canvas ƒë·ªÉ ƒë·∫∑t ·∫£nh n·ªÅn
        self.canvas = tk.Canvas(self.root)
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.waiting_window = None
        
        # Load m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
        try:
            # Load model t·ª´ ƒë∆∞·ªùng d·∫´n ƒë√£ l∆∞u
            self.model = SentenceTransformer(MODEL_PATH)
            
            # Load encoded_templates
            encoded_templates_path = os.path.join(MODEL_PATH, "encoded_templates.npy")
            if os.path.exists(encoded_templates_path):
                # Load d·ªØ li·ªáu t·ª´ file .npy
                loaded_data = np.load(encoded_templates_path, allow_pickle=True).item()
                
                # Chuy·ªÉn c√°c gi√° tr·ªã t·ª´ list th√†nh numpy array
                self.encoded_templates = {k: np.array(v) for k, v in loaded_data.items()}
                print("ƒê√£ load encoded_templates th√†nh c√¥ng")
            else:
                print(f"Kh√¥ng t√¨m th·∫•y file {encoded_templates_path}")
                # T·∫°o m·ªôt encoded_templates tr·ªëng ƒë·ªÉ tr√°nh l·ªói
                self.encoded_templates = {}
        except Exception as e:
            print(f"L·ªói khi load model ho·∫∑c encoded_templates: {e}")
            # Fallback: N·∫øu kh√¥ng load ƒë∆∞·ª£c, t·∫°o model m·ªõi
            self.model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
            self.encoded_templates = {}
            
        # Load ·∫£nh n·ªÅn v√† resize
        bg_image_path = "img/bg_01.jpg"
        if os.path.exists(bg_image_path):
            bg_image = Image.open(bg_image_path)
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            bg_image = bg_image.resize((screen_width, screen_height), Image.Resampling.LANCZOS)  # Resize ·∫£nh

            # L∆∞u tham chi·∫øu ·∫£nh v√†o thu·ªôc t√≠nh c·ªßa l·ªõp
            self.bg_photo = ImageTk.PhotoImage(bg_image)  # L∆∞u tham chi·∫øu
            self.canvas.create_image(0, 0, image=self.bg_photo, anchor=tk.NW)  # ƒê·∫£m b·∫£o ·∫£nh ƒë∆∞·ª£c hi·ªÉn th·ªã
        else:
            print(f"·∫¢nh kh√¥ng t·ªìn t·∫°i: {bg_image_path}")

        self.custom_font = font.Font(family="Helvetica", size=20)

        self.label = tk.Label(self.root, text="CH·ªåN D·ªäCH V·ª§: ", font=self.custom_font, bg="white", fg="black")
        self.label.place(relx=0.5, rely=0.2, anchor="center")
        
        # T·∫°o c√°c n√∫t
        self.create_buttons()

        self.mic_button = tk.Button(self.root, text="B·∫Øt ƒë·∫ßu nghe", command=self.start_listening,
                                     font=self.custom_font, bg="#4CAF50", fg="white", width=15, height=1)
        self.mic_button.place(relx=0.5, rely=0.8, anchor="center")  # N√∫t nghe n·∫±m ·ªü d∆∞·ªõi c√πng c·ªßa m√†n h√¨nh

        self.exit_button = tk.Button(self.root, text="Tho√°t", command=self.exit_app,
                                     font=self.custom_font, bg="#f44336", fg="white", width=15, height=1)
        self.exit_button.place(relx=0.5, rely=0.9, anchor="center")  # N√∫t tho√°t n·∫±m ·ªü d∆∞·ªõi c√πng c·ªßa m√†n h√¨nh

        self.speech = sr.Recognizer()

        # üîπ ƒê∆∞a hai n√∫t n√†y s√°t m√©p h∆°n
        self.mic_button.place(relx=0.05, rely=0.92, anchor="w")  # G√≥c tr√°i s√°t m√©p
        self.exit_button.place(relx=0.95, rely=0.92, anchor="e")  # G√≥c ph·∫£i s√°t m√©p
        
        # Th√™m c√°c bi·∫øn ƒë·ªÉ x·ª≠ l√Ω x√°c nh·∫≠n
        self.confirmed_action = None
        self.confirmation_buttons = []

    def load_actions(self, file_path):
        if os.path.exists(file_path):
            with open(file_path, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}

    def create_buttons(self):
        actions = [
            "tra c·ª©u b·∫£o hi·ªÉm", "c·∫•p l·∫°i b·∫±ng l√°i xe", 
            "l√†m gi·∫•y t·∫°m tr√∫", "ƒëƒÉng k√Ω h·ªô kh·∫©u", 
            "c·∫•p ƒë·ªïi cƒÉn c∆∞·ªõc c√¥ng d√¢n", "ƒëƒÉng k√Ω k·∫øt h√¥n",
            "khai sinh cho tr·∫ª em", "ch·ª©ng th·ª±c gi·∫•y t·ªù"
        ]

        y_position = 0.35  # B·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ d∆∞·ªõi ti√™u ƒë·ªÅ
        x_positions = [0.3, 0.7]  # C·ªôt tr√°i v√† ph·∫£i
        button_spacing = 0.15  # Kho·∫£ng c√°ch gi·ªØa c√°c h√†ng

        for i, action in enumerate(actions):
            col = x_positions[i % 2]  # Chia ƒë·ªÅu v√†o 2 c·ªôt (tr√°i, ph·∫£i)
            button = tk.Button(self.root, text=action, command=lambda a=action: self.perform_action(a),
                            font=self.custom_font, bg="#2196F3", fg="white", width=20, height=2)
            button.place(relx=col, rely=y_position, anchor="center")

            if i % 2 == 1:  # Sau m·ªói h√†ng ƒë·ªß 2 n√∫t th√¨ xu·ªëng d√≤ng
                y_position += button_spacing

    def start_listening(self):
        speak("T√¥i ƒëang nghe")
        with sr.Microphone() as source:
            self.label.config(text="ƒêang nghe...")
            self.root.update()
            audio = self.speech.listen(source)
            try:
                text = self.speech.recognize_google(audio, language='vi-VN')
                self.label.config(text=f"B·∫°n n√≥i: {text}")
                
                # Th·ª±c hi·ªán d·ª± ƒëo√°n v·ªõi ng∆∞·ª°ng tin c·∫≠y
                best_match, confidence = self.predict_action(text)
                
                # Ng∆∞·ª°ng ƒë·ªô tin c·∫≠y ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ h·ªèi l·∫°i hay kh√¥ng
                THRESHOLD = 0.7  # C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ng∆∞·ª°ng n√†y
                
                if best_match and confidence >= THRESHOLD:
                    # N·∫øu ƒë·ªô tin c·∫≠y cao, th·ª±c hi·ªán h√†nh ƒë·ªông ngay
                    self.perform_action(best_match)
                elif best_match:
                    # N·∫øu ƒë·ªô tin c·∫≠y th·∫•p, h·ªèi l·∫°i ng∆∞·ªùi d√πng
                    self.ask_for_confirmation(text, best_match)
                else:
                    speak("Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")
                    self.label.config(text="M·ªùi b·∫°n ch·ªçn d·ªãch v·ª•")
                
            except sr.UnknownValueError:
                self.label.config(text="M·ªùi b·∫°n ch·ªçn d·ªãch v·ª•")
            except sr.RequestError:
                self.label.config(text="L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.")

    def predict_action(self, input_text):
        """D·ª± ƒëo√°n h√†nh ƒë·ªông d·ª±a tr√™n vƒÉn b·∫£n ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ h√†nh ƒë·ªông t·ªët nh·∫•t c≈©ng nh∆∞ ƒë·ªô tin c·∫≠y"""
        input_embedding = self.model.encode([input_text])[0]
        best_score = -float("inf")
        best_action = None

        for action, embeddings in self.encoded_templates.items():
            similarities = np.dot(embeddings, input_embedding) / (np.linalg.norm(embeddings, axis=1) * np.linalg.norm(input_embedding))
            max_similarity = np.max(similarities)

            if max_similarity > best_score:
                best_score = max_similarity
                best_action = action

        return best_action, best_score

    def ask_for_confirmation(self, original_text, suggested_action):
        """Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n v·ªõi n√∫t ƒê·ªìng √Ω v√† Hu·ª∑ b·ªè"""
        # X√≥a c√°c n√∫t x√°c nh·∫≠n c≈© n·∫øu c√≥
        for button in self.confirmation_buttons:
            button.destroy()
        self.confirmation_buttons = []
        
        # Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        confirmation_text = f"B·∫°n mu·ªën {suggested_action} ph·∫£i kh√¥ng?"
        speak(confirmation_text)
        self.label.config(text=confirmation_text)
        
        # T·∫°o n√∫t x√°c nh·∫≠n
        confirm_button = tk.Button(
            self.root, 
            text="ƒê√∫ng v·∫≠y", 
            command=lambda: self.on_confirmation(suggested_action, True),
            font=self.custom_font, 
            bg="#4CAF50", 
            fg="white", 
            width=15, 
            height=1
        )
        confirm_button.place(relx=0.4, rely=0.3, anchor="center")
        self.confirmation_buttons.append(confirm_button)
        
        # T·∫°o n√∫t t·ª´ ch·ªëi
        cancel_button = tk.Button(
            self.root, 
            text="Kh√¥ng ph·∫£i", 
            command=lambda: self.on_confirmation(suggested_action, False),
            font=self.custom_font, 
            bg="#f44336", 
            fg="white", 
            width=15, 
            height=1
        )
        cancel_button.place(relx=0.6, rely=0.3, anchor="center")
        self.confirmation_buttons.append(cancel_button)

    def on_confirmation(self, action, is_confirmed):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n ho·∫∑c t·ª´ ch·ªëi ƒë·ªÅ xu·∫•t"""
        # X√≥a c√°c n√∫t x√°c nh·∫≠n
        for button in self.confirmation_buttons:
            button.destroy()
        self.confirmation_buttons = []
        
        if is_confirmed:
            # N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n, th·ª±c hi·ªán h√†nh ƒë·ªông
            self.perform_action(action)
        else:
            # N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, quay l·∫°i m√†n h√¨nh ch·ªçn
            speak("Vui l√≤ng ch·ªçn d·ªãch v·ª• kh√°c")
            self.label.config(text="CH·ªåN D·ªäCH V·ª§: ")

    def perform_action(self, command):
        from WinForm.cap_lai_bang_lai_xe import run  # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
        if command == "tra c·ª©u b·∫£o hi·ªÉm":
            speak("B·∫°n mu·ªën tra c·ª©u b·∫£o hi·ªÉm g√¨?")
        elif command == "c·∫•p l·∫°i b·∫±ng l√°i xe":
            speak("M·ªùi b·∫°n ƒëi·ªÅn v√†o form sau!")
            # messagebox.showinfo("Th√¥ng b√°o", "B·∫£n in ƒëang ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·ªù...")
            run()
            speak("B·∫£n in ƒëang ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·ªù...")
        elif command == "l√†m gi·∫•y t·∫°m tr√∫":
            speak("B·∫°n ƒëi·ªÅn th√¥ng tin v√†o phi·∫øu khai sau. Sau ƒë√≥ mang ƒë·∫øn qu·∫ßy s·ªë 6")
            # messagebox.showinfo("Th√¥ng b√°o", "B·∫£n in ƒëang ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·ªù...")
            run_gtt()
            speak("B·∫£n in ƒëang ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ch·ªù...")
        elif command == "ƒëƒÉng k√Ω h·ªô kh·∫©u":
            speak("T√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n ƒëƒÉng k√Ω h·ªô kh·∫©u!")
        elif command == "c·∫•p ƒë·ªïi cƒÉn c∆∞·ªõc c√¥ng d√¢n":
            speak("T√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n c·∫•p ƒë·ªïi cƒÉn c∆∞·ªõc c√¥ng d√¢n!")
        elif command == "ƒëƒÉng k√Ω k·∫øt h√¥n":
            speak("T√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n ƒëƒÉng k√Ω k·∫øt h√¥n!")
        elif command == "khai sinh cho tr·∫ª em":
            speak("T√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n l√†m gi·∫•y khai sinh cho tr·∫ª em!")
        elif command == "ch·ª©ng th·ª±c gi·∫•y t·ªù":
            speak("T√¥i s·∫Ω gi√∫p b·∫°n ch·ª©ng th·ª±c gi·∫•y t·ªù!")
        else:
            speak("Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")
            self.label.config(text="M·ªùi b·∫°n ch·ªçn d·ªãch v·ª•")

    def exit_app(self):
        speak("R·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n, h·∫πn g·∫∑p l·∫°i!")
        file_path = "greeting.mp3"
        if os.path.exists(file_path):
            os.remove(file_path)
        self.root.withdraw()  # ·∫®n c·ª≠a s·ªï thay v√¨ ƒë√≥ng ho√†n to√†n ƒë·ªÉ c√≥ th·ªÉ m·ªü l·∫°i
        # Quay l·∫°i c·ª≠a s·ªï ch·ªù (t·∫°o l·∫°i n·∫øu c·∫ßn)
        self.reset_waiting_window()

    def reset_waiting_window(self):
        if self.waiting_window is None or not self.waiting_window.winfo_exists():
            # C·ª≠a s·ªï ch·ªù qu√©t th·∫ª to√†n m√†n h√¨nh
            self.waiting_window = tk.Toplevel(self.root)
            self.waiting_window.title("Qu√©t th·∫ª ƒë·ªÉ ti·∫øp t·ª•c")
            self.waiting_window.attributes('-fullscreen', True)  # Fullscreen mode

            screen_width = self.waiting_window.winfo_screenwidth()
            screen_height = self.waiting_window.winfo_screenheight()

            
            self.image = Image.open("img\\bg_00.jpg")
            self.image = self.image.resize((screen_width, screen_height), Image.Resampling.LANCZOS)
            self.photo = ImageTk.PhotoImage(self.image)
            
            self.image_label = tk.Label(self.waiting_window, image=self.photo)
            self.image_label.pack()
            
            self.status_label = tk.Label(self.waiting_window, text="Vui l√≤ng qu√©t th·∫ª ƒë·ªÉ ti·∫øp t·ª•c", font=self.custom_font)
            self.status_label.pack(pady=10)
        else:
            # If waiting window exists, just display it
            self.waiting_window.deiconify()

def run_app(existing_root=None):
    if existing_root:
        # S·ª≠ d·ª•ng c·ª≠a s·ªï hi·ªán c√≥
        for widget in existing_root.winfo_children():
            widget.destroy()
        existing_root.deiconify()  # Hi·ªÉn th·ªã l·∫°i n·∫øu ƒë√£ b·ªã ·∫©n
        app = MainApp(existing_root)
    else:
        # T·∫°o c·ª≠a s·ªï m·ªõi n·∫øu kh√¥ng c√≥ c·ª≠a s·ªï n√†o ƒë∆∞·ª£c truy·ªÅn v√†o
        root = tk.Tk()
        app = MainApp(root)
        root.mainloop()

if __name__ == "__main__":
    run_app()